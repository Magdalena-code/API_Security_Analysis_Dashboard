import React, { useEffect, useRef } from 'react';
import * as d3 from 'd3';
import PropTypes from 'prop-types';

const consolidateVulnerabilities = (vulnerabilities) => {
    const consolidated = {};

    vulnerabilities.forEach(vuln => {
        if (!consolidated[vuln.vuln_id]) {
            consolidated[vuln.vuln_id] = {
                ...vuln,
                owasp_names: [vuln.owasp_name]
            };
        } else {
            consolidated[vuln.vuln_id].owasp_names.push(vuln.owasp_name);
        }
    });

    return Object.values(consolidated);
};

function VulnerabilityCircles({ vulnerabilities }) {
    const svgRef = useRef(null);
    const legendRef = useRef(null);

    useEffect(() => {
        if (!vulnerabilities || vulnerabilities.length === 0) return;

        const uniqueVulnerabilities = consolidateVulnerabilities(vulnerabilities);

        const width = 800;
        const height = 600;
        const radius = Math.min(width, height) / 2 - 50;

        const svg = d3.select(svgRef.current)
            .attr('width', width)
            .attr('height', height)
            .style('background-color', '#f0f0f0')
            .style('margin', '0 auto')
            .style('display', 'block');

        svg.selectAll('*').remove();

        const gContainer = svg.append('g')
            .attr('transform', `translate(${width / 2},${height / 2})`);

        const color = d3.scaleOrdinal(d3.schemeCategory10);

        const angleScale = d3.scaleLinear()
            .domain([0, uniqueVulnerabilities.length])
            .range([0, 2 * Math.PI]);

        const pie = d3.pie().value(1);

        // logarithmic scale for the circle sizes
        const sizeScale = d3.scaleLog()
            .domain([1, d3.max(uniqueVulnerabilities, d => d.vuln_number)])
            .range([5, 50]);

        const tooltipLayer = d3.select('body').append('div')
            .style('position', 'absolute')
            .style('pointer-events', 'none')
            .style('z-index', '10')
            .style('visibility', 'hidden')
            .style('background-color', 'rgba(255, 255, 255, 0.8)')
            .style('padding', '5px')
            .style('border', '1px solid #ccc')
            .style('border-radius', '3px')
            .attr('id', 'tooltip');

        const sliceGroups = gContainer.selectAll('.slice')
            .data(uniqueVulnerabilities, d => d.vuln_id)
            .enter()
            .append('g')
            .attr('class', 'slice')
            .attr('transform', (d, i) => `translate(${(radius - 50) * Math.cos(angleScale(i) - Math.PI / 2)},${(radius - 50) * Math.sin(angleScale(i) - Math.PI / 2)})`);

        sliceGroups.each(function (d) {
            const arc = d3.arc()
                .outerRadius(sizeScale(d.vuln_number))
                .innerRadius(0);

            const group = d3.select(this);
            const pieData = pie(d.owasp_names);

            group.selectAll('path')
                .data(pieData)
                .enter()
                .append('path')
                .attr('d', arc)
                .attr('fill', pieSlice => color(pieSlice.data));

            group.append('text')
                .attr('text-anchor', 'middle')
                .attr('dy', '0.3em')
                .style('font-size', d => `${Math.max(10, sizeScale(d.vuln_number) / 2)}px`)
                .text(d => d.vuln_number);
        });

        sliceGroups.on('mouseover', function (event, d) {
            d3.select(this).selectAll('path').attr('stroke', '#ff6347').attr('stroke-width', 1.5);
            const categories = d.owasp_names.filter(name => name).join(', ');
            tooltipLayer.style('visibility', 'visible')
                .text(`${d.vuln_name} - ${d.vuln_number}x\nCategories: ${categories}`);
        })
            .on('mousemove', function (event) {
                tooltipLayer.style('top', (event.pageY + 10) + 'px')
                    .style('left', (event.pageX + 10) + 'px');
            })
            .on('mouseout', function () {
                d3.select(this).selectAll('path').attr('stroke', null);
                tooltipLayer.style('visibility', 'hidden');
            });

        const zoom = d3.zoom()
            .scaleExtent([0.5, 5])
            .on('zoom', (event) => {
                gContainer.attr('transform', event.transform);
            });

        svg.call(zoom);

        return () => {
            svg.selectAll('*').remove();
            d3.select('#tooltip').remove();
        };
    }, [vulnerabilities]);

    useEffect(() => {
        if (!vulnerabilities || vulnerabilities.length === 0) return;

        const uniqueOwaspNames = [...new Set(vulnerabilities.flatMap(vuln => vuln.owasp_name))];

        const legendHeight = uniqueOwaspNames.length * 20 + 20;

        const legend = d3.select(legendRef.current)
            .style('height', `${legendHeight}px`);

        legend.selectAll('*').remove();
        const color = d3.scaleOrdinal(d3.schemeCategory10);

        legend.selectAll('rect')
            .data(uniqueOwaspNames)
            .enter()
            .append('rect')
            .attr('x', 0)
            .attr('y', (d, i) => i * 20)
            .attr('width', 18)
            .attr('height', 18)
            .attr('fill', (d, i) => color(d));

        legend.selectAll('text')
            .data(uniqueOwaspNames)
            .enter()
            .append('text')
            .attr('x', 24)
            .attr('y', (d, i) => i * 20 + 9)
            .attr('dy', '0.35em')
            .attr('font-size', '12px')
            .attr('text-anchor', 'start')
            .text(d => d);
    }, [vulnerabilities]);

    return (
        <div style={{ width: '100%', height: 'auto', border: '1px solid #ccc', position: 'relative' }}>
            <h2>Vulnerability Counts per Vulnerability</h2>
            <svg ref={legendRef} style={{ display: 'block', margin: '0 auto' }}></svg>
            <svg ref={svgRef}></svg>
        </div>
    );
}

VulnerabilityCircles.propTypes = {
    vulnerabilities: PropTypes.arrayOf(
        PropTypes.shape({
            vuln_id: PropTypes.number.isRequired,
            vuln_name: PropTypes.string.isRequired,
            vuln_number: PropTypes.number.isRequired,
            prio_name: PropTypes.string.isRequired,
            owasp_name: PropTypes.string.isRequired,
            scan_date: PropTypes.string.isRequired,
            scan_id: PropTypes.number.isRequired,
            scan_url: PropTypes.string.isRequired,
            tool_name: PropTypes.string.isRequired,
        })
    ).isRequired,
};

export default VulnerabilityCircles;
