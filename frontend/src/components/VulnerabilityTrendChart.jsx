import React, { useEffect, useState } from 'react';
import axios from 'axios';
import { Line } from 'react-chartjs-2';
import {
    Chart as ChartJS,
    LineElement,
    PointElement,
    LineController,
    CategoryScale,
    LinearScale,
    Title,
    Tooltip,
    Legend
} from 'chart.js';

ChartJS.register(
    LineElement,
    PointElement,
    LineController,
    CategoryScale,
    LinearScale,
    Title,
    Tooltip,
    Legend
);

const API_URL = import.meta.env.VITE_API_URL;

// Custom plugin for drawing a vertical line
const verticalLinePlugin = (currentScanIndex) => {
    return {
        id: 'verticalLinePlugin',
        afterDraw: (chart) => {
            if (typeof currentScanIndex === 'number' && currentScanIndex !== -1) {
                const ctx = chart.ctx;
                const x = chart.scales.x.getPixelForValue(chart.data.labels[currentScanIndex]);
                const topY = chart.scales.y.top;
                const bottomY = chart.scales.y.bottom;

                ctx.save();
                ctx.beginPath();
                ctx.moveTo(x, topY);
                ctx.lineTo(x, bottomY);
                ctx.lineWidth = 2;
                ctx.strokeStyle = 'red';
                ctx.stroke();
                ctx.restore();
            }
        }
    };
};

const VulnerabilityTrendChart = ({ scanUrl, currentScanDate }) => {
    const [trendData, setTrendData] = useState(null);
    const [currentScanIndex, setCurrentScanIndex] = useState(null);

    useEffect(() => {
        const fetchTrendData = async () => {
            try {
                const response = await axios.get(`${API_URL}/vulnerability_trend`, {
                    params: { scan_url: scanUrl }
                });
                const data = response.data;
                setTrendData(data);

                if (data.scan_date) {
                    const index = data.scan_date.indexOf(currentScanDate);
                    setCurrentScanIndex(index);
                } else {
                    console.warn('No scan_date field found in the trend data response');
                    setCurrentScanIndex(-1);
                }
            } catch (error) {
                console.error('Error fetching trend data:', error);
            }
        };

        fetchTrendData();
    }, [scanUrl, currentScanDate]);

    const handlePointClick = async (e, elements) => {
        if (elements.length > 0) {
            const element = elements[0];
            const dataIndex = element.index;
            const selectedDate = trendData.scan_date[dataIndex];

            try {
                const response = await axios.get(`${API_URL}/scans`, {
                    params: {
                        scan_url: scanUrl,
                        scan_date: selectedDate
                    }
                });
                const scans = response.data;
                if (scans.length > 0) {
                    const scanId = scans[0].scan_id;
                    window.location.href = `/scan/${scanId}`;
                } else {
                    console.warn('No scan found for the selected date');
                }
            } catch (error) {
                console.error('Error fetching scan ID:', error);
            }
        }
    };

    if (!trendData) {
        return <p>Loading...</p>;
    }

    const scanActiveExists = Array.isArray(trendData.scan_active);

    // Define a custom color scheme
    const colors = [
        '#FF6384', // Red
        '#36A2EB', // Blue
        '#FFCE56', // Yellow
        '#4BC0C0', // Teal
        '#9966FF', // Purple
        '#FF9F40', // Orange
        '#7DCEA0', // Green
        '#C39BD3', // Violet
        '#7FB3D5', // Light Blue
        '#F1948A', // Light Red
    ];

    const data = {
        labels: trendData.scan_date,
        datasets: Object.keys(trendData)
            .filter(key => key !== 'scan_date' && key !== 'scan_active' && key !== 'scan_id')
            .map((key, index) => {
                const color = colors[index % colors.length]; // Cycle through colors
                return {
                    label: key,
                    data: trendData[key],
                    fill: false,
                    borderColor: color,
                    backgroundColor: color,
                    pointStyle: scanActiveExists
                        ? trendData.scan_active.map(isActive => isActive ? 'star' : 'circle')
                        : 'circle',
                    pointRadius: 5,
                };
            })
    };

    const options = {
        responsive: true,
        plugins: {
            verticalLinePlugin: true,
            tooltip: {
                callbacks: {
                    label: function (context) {
                        const label = context.dataset.label || '';
                        const value = context.raw;
                        const index = context.dataIndex;
                        const scanActive = scanActiveExists
                            ? trendData.scan_active[index] ? 'Active' : 'Passive'
                            : 'Unknown';
                        return `${label}: ${value} (${scanActive})`;
                    }
                }
            },
            legend: {
                display: true,
                position: 'bottom',
                labels: {
                    usePointStyle: true,
                    generateLabels: function (chart) {
                        return [
                            {
                                text: 'Active Scan',
                                fillStyle: 'black',
                                pointStyle: 'star'
                            },
                            {
                                text: 'Passive Scan',
                                fillStyle: 'black',
                                pointStyle: 'circle'
                            }
                        ];
                    }
                }
            }
        },
        scales: {
            x: {
                type: 'category',
                title: {
                    display: true,
                    text: 'Date'
                },
                offset: true,
                ticks: {
                    autoSkip: true,
                },
                grid: {
                    display: false
                }
            },
            y: {
                title: {
                    display: true,
                    text: 'Number of Vulnerabilities'
                },
                ticks: {
                    beginAtZero: true,
                    precision: 0
                },
                grid: {
                    display: false
                }
            }
        },
        onClick: handlePointClick
    };

    return (
        <div>
            <h2>Vulnerability Trend Over Time by OWASP Category</h2>
            <Line data={data} options={options} plugins={[verticalLinePlugin(currentScanIndex)]} />
        </div>
    );
};

export default VulnerabilityTrendChart;
